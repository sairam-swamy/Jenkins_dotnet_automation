pipeline {
    agent none

    environment {
        ACR_NAME = "capgeminijenkins.azurecr.io"
        IMAGE_NAME = "productapi"
        BUILD_TAGGED = "${IMAGE_NAME}:${BUILD_NUMBER}"
        AZURE_RG = "capgemini_jenkins"
        ACI_NAME = "capgeminijenkinsdemo"
        LOCATION = "CentralIndia"
        WORK_DIR = "shared_workspace"
    }

    stages {
        stage('Checkout') {
            agent { label 'dotnet_agent' }
            steps {
                dir("${WORK_DIR}") {
                    git 'https://github.com/sairam-swamy/Jenkins_dotnet_automation'
                }
                stash name: 'workspace', includes: "${WORK_DIR}/**/*"
            }
        }

        stage('Build .NET Project') {
            agent { label 'dotnet_agent' }
            steps {
                unstash 'workspace'
                dir("${WORK_DIR}") {
                    sh 'dotnet publish -c Release -o out'
                }
                stash name: 'workspace', includes: "${WORK_DIR}/**/*"
            }
        }

        stage('Build Docker Image') {
            agent { label 'docker_agent' }
            steps {
                unstash 'workspace'
                dir("${WORK_DIR}") {
                    sh """
                    docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .
                    docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${ACR_NAME}/${BUILD_TAGGED}
                    """
                }
                stash name: 'workspace', includes: "${WORK_DIR}/**/*"
            }
        }

        stage('Push to ACR') {
            agent { label 'docker_agent' }
            steps {
                unstash 'workspace'
                dir("${WORK_DIR}") {
                    withCredentials([usernamePassword(credentialsId: 'acr-creds', usernameVariable: 'Username', passwordVariable: 'Password')]) {
                        sh """
                        echo $Password | docker login ${ACR_NAME} -u $Username --password-stdin
                        docker push ${ACR_NAME}/${BUILD_TAGGED}
                        """
                    }
                }
            }
        }

        stage('Deploy to ACI') {
            agent { label 'docker_agent' }
            steps {
                unstash 'workspace'
                dir("${WORK_DIR}") {
                    withCredentials([usernamePassword(credentialsId: 'acr-creds', usernameVariable: 'Username', passwordVariable: 'Password')]) {
                        sh """
                        az container delete --name ${ACI_NAME} --resource-group ${AZURE_RG} --yes || true
                        sleep 60
                        az container create \
                          --resource-group ${AZURE_RG} \
                          --name ${ACI_NAME} \
                          --image ${ACR_NAME}/${BUILD_TAGGED} \
                          --registry-login-server ${ACR_NAME} \
                          --registry-username $Username \
                          --registry-password $Password \
                          --dns-name-label product-api-${BUILD_NUMBER} \
                          --ports 5000 \
                          --cpu 1 \
                          --memory 1.5 \
                          --os-type Linux \
                          --location ${LOCATION}
                        """
                    }
                    sh "echo 'Files after ACI deployment:' && ls -R"
                }
                stash name: 'workspace', includes: "${WORK_DIR}/**/*"
            }
        }

        stage('Deploy to Kubernetes') {
            agent { label 'kuber_agent' }
            steps {
                unstash 'workspace'
                dir("${WORK_DIR}") {
                    sh """
                    sed -i 's|image: ${ACR_NAME}/${IMAGE_NAME}:.*|image: ${ACR_NAME}/${BUILD_TAGGED}|' kubernetes.yaml
                    kubectl apply -f kubernetes.yaml
                    """
                }
            }
        }
    }
}
